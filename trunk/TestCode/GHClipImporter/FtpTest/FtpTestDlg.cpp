
// FtpTestDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "FtpTest.h"
#include "FtpTestDlg.h"
#include "afxinet.h"
#include "StrConvert.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()


// CFtpTestDlg 对话框




CFtpTestDlg::CFtpTestDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CFtpTestDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CFtpTestDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CFtpTestDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	//}}AFX_MSG_MAP
	ON_BN_CLICKED(IDC_BUTTON1, &CFtpTestDlg::OnBnClickedButton1)
END_MESSAGE_MAP()


// CFtpTestDlg 消息处理程序

BOOL CFtpTestDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CFtpTestDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CFtpTestDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CFtpTestDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CFtpTestDlg::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码
	AfxOleInit();
	CString strFtp = TEXT("tianyx-notepc");
	CString strUser = TEXT("tyx");
	CString strPw = TEXT("tyx");
	CInternetSession *pInetSession= new CInternetSession (NULL, 1, PRE_CONFIG_INTERNET_ACCESS);
	pInetSession->SetOption(INTERNET_OPTION_CODEPAGE , CP_UTF8);
	DWORD dwVal = 0;
	pInetSession->QueryOption(INTERNET_OPTION_CODEPAGE, dwVal);
	CFtpConnection *pFtpConnection = NULL, *pFtpConnectionDest = NULL;
	try
	{
		pFtpConnection = pInetSession->GetFtpConnection(strFtp,strUser,strPw);
		pFtpConnection->SetOption(INTERNET_OPTION_CODEPAGE , CP_UTF8);
		BOOL bSuc = pFtpConnection->SetCurrentDirectory("tyx2/tyx");
		CFtpFileFind finder(pFtpConnection);
		string strKey = TEXT("*.txt");
		wstring wszKey = Ansi2W(strKey);
		string szKey = W2UTF8(wszKey);
		// start looping
		BOOL bWorking = finder.FindFile(szKey.c_str());
		while (bWorking)
		{
			bWorking = finder.FindNextFile();
			TRACE("%s\n", (LPCTSTR)finder.GetFileURL());
			string strFile = finder.GetFileURL();
			wstring strwFile = UTF82W(strFile);
			string strFilez = W2Ansi(strwFile);
			TRACE("%s\n", strFilez.c_str());
		}
		finder.Close();

	}
	catch (CInternetException* e)
	{   
		char szBuff[1024];
		e->GetErrorMessage(szBuff, 1000);
		ASSERT(FALSE);
	} 
}
