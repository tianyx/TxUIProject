/* soapClipServiceSoapProxy.h
   Generated by gSOAP 2.7.13 from clipservice.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapClipServiceSoapProxy_H
#define soapClipServiceSoapProxy_H
#include "soapH.h"

class SOAP_CMAC ClipServiceSoapProxy : public soap
{ public:
	/// Endpoint URL of service 'ClipServiceSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	ClipServiceSoapProxy();
	/// Constructor with copy of another engine state
	ClipServiceSoapProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	ClipServiceSoapProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	ClipServiceSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~ClipServiceSoapProxy();
	/// Initializer used by constructor
	virtual	void ClipServiceSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'OutStorageFunction' (returns error code or SOAP_OK)
	virtual	int OutStorageFunction(_CLIPSVR__OutStorageFunction *CLIPSVR__OutStorageFunction, _CLIPSVR__OutStorageFunctionResponse *CLIPSVR__OutStorageFunctionResponse);

	/// Web service operation 'TransferTaskExcuteResultNotify' (returns error code or SOAP_OK)
	virtual	int TransferTaskExcuteResultNotify(_CLIPSVR__TransferTaskExcuteResultNotify *CLIPSVR__TransferTaskExcuteResultNotify, _CLIPSVR__TransferTaskExcuteResultNotifyResponse *CLIPSVR__TransferTaskExcuteResultNotifyResponse);

	/// Web service operation 'MaterialQuery' (returns error code or SOAP_OK)
	virtual	int MaterialQuery(_CLIPSVR__MaterialQuery *CLIPSVR__MaterialQuery, _CLIPSVR__MaterialQueryResponse *CLIPSVR__MaterialQueryResponse);

	/// Web service operation 'ClipIsExistQuery' (returns error code or SOAP_OK)
	virtual	int ClipIsExistQuery(_CLIPSVR__ClipIsExistQuery *CLIPSVR__ClipIsExistQuery, _CLIPSVR__ClipIsExistQueryResponse *CLIPSVR__ClipIsExistQueryResponse);

	/// Web service operation 'QueryCache' (returns error code or SOAP_OK)
	virtual	int QueryCache(_CLIPSVR__QueryCache *CLIPSVR__QueryCache, _CLIPSVR__QueryCacheResponse *CLIPSVR__QueryCacheResponse);
};
#endif
