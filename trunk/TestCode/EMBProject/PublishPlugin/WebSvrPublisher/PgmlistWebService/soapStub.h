/* soapStub.h
   Generated by gSOAP 2.7.13 from clipservice.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_CLIPSVR__OutMessage
#define SOAP_TYPE_CLIPSVR__OutMessage (8)
/* CLIPSVR:OutMessage */
class SOAP_CMAC CLIPSVR__OutMessage
{
public:
	std::string *programID;	/* optional element of type xsd:string */
	std::string *programName;	/* optional element of type xsd:string */
	time_t *playDate;	/* required element of type xsd:dateTime */
	std::string *channelId;	/* optional element of type xsd:string */
	std::string *clipType;	/* optional element of type xsd:string */
	int *HD;	/* required element of type xsd:int */
	int *startpoint;	/* required element of type xsd:int */
	int *endpoint;	/* required element of type xsd:int */
	int *length;	/* required element of type xsd:int */
	class CLIPSVR__ArrayOfOutMessageFile *fileList;	/* optional element of type CLIPSVR:ArrayOfOutMessageFile */
	std::string *ip;	/* optional element of type xsd:string */
	std::string *path;	/* optional element of type xsd:string */
	int port;	/* required element of type xsd:int */
	std::string *user;	/* optional element of type xsd:string */
	std::string *pass;	/* optional element of type xsd:string */
	std::string *callbackurl;	/* optional element of type xsd:string */
	std::string *emerg;	/* optional element of type xsd:string */
	std::string *SourceID;	/* optional element of type xsd:string */
	class CLIPSVR__ArrayOfBreakPoint *BreakPointList;	/* optional element of type CLIPSVR:ArrayOfBreakPoint */
	class CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute *ExtendAttributes;	/* optional element of type CLIPSVR:ArrayOfExtentionAttributeTypeExtentionAttribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_CLIPSVR__OutMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__OutMessage() : programID(NULL), programName(NULL), playDate(NULL), channelId(NULL), clipType(NULL), HD(NULL), startpoint(NULL), endpoint(NULL), length(NULL), fileList(NULL), ip(NULL), path(NULL), port(0), user(NULL), pass(NULL), callbackurl(NULL), emerg(NULL), SourceID(NULL), BreakPointList(NULL), ExtendAttributes(NULL), soap(NULL) { }
	virtual ~CLIPSVR__OutMessage() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__ArrayOfOutMessageFile
#define SOAP_TYPE_CLIPSVR__ArrayOfOutMessageFile (9)
/* CLIPSVR:ArrayOfOutMessageFile */
class SOAP_CMAC CLIPSVR__ArrayOfOutMessageFile
{
public:
	std::vector<class CLIPSVR__OutMessageFile * >OutMessageFile;	/* optional element of type CLIPSVR:OutMessageFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_CLIPSVR__ArrayOfOutMessageFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__ArrayOfOutMessageFile() : soap(NULL) { }
	virtual ~CLIPSVR__ArrayOfOutMessageFile() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__OutMessageFile
#define SOAP_TYPE_CLIPSVR__OutMessageFile (10)
/* CLIPSVR:OutMessageFile */
class SOAP_CMAC CLIPSVR__OutMessageFile
{
public:
	std::string *md5;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_CLIPSVR__OutMessageFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__OutMessageFile() : md5(NULL), name(NULL), soap(NULL) { }
	virtual ~CLIPSVR__OutMessageFile() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__ArrayOfBreakPoint
#define SOAP_TYPE_CLIPSVR__ArrayOfBreakPoint (11)
/* CLIPSVR:ArrayOfBreakPoint */
class SOAP_CMAC CLIPSVR__ArrayOfBreakPoint
{
public:
	std::vector<class CLIPSVR__BreakPoint * >BreakPoints;	/* optional element of type CLIPSVR:BreakPoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_CLIPSVR__ArrayOfBreakPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__ArrayOfBreakPoint() : soap(NULL) { }
	virtual ~CLIPSVR__ArrayOfBreakPoint() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__BreakPoint
#define SOAP_TYPE_CLIPSVR__BreakPoint (12)
/* CLIPSVR:BreakPoint */
class SOAP_CMAC CLIPSVR__BreakPoint
{
public:
	int *PointLocation;	/* optional element of type xsd:int */
	std::string *Description;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_CLIPSVR__BreakPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__BreakPoint() : PointLocation(NULL), Description(NULL), soap(NULL) { }
	virtual ~CLIPSVR__BreakPoint() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute
#define SOAP_TYPE__CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute (43)
/* CLIPSVR:ArrayOfExtentionAttributeTypeExtentionAttribute-ExtentionAttribute */
class SOAP_CMAC _CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute
{
public:
	std::string *ItemCode;	/* optional element of type xsd:string */
	std::string *ItemName;	/* optional element of type xsd:string */
	std::string *Value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute() : ItemCode(NULL), ItemName(NULL), Value(NULL) { }
	virtual ~_CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute
#define SOAP_TYPE_CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute (13)
/* CLIPSVR:ArrayOfExtentionAttributeTypeExtentionAttribute */
class SOAP_CMAC CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute
{
public:
	int __sizeExtentionAttribute;	/* sequence of elements <ExtentionAttribute> */
	_CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute_ExtentionAttribute *ExtentionAttribute;	/* optional element of type CLIPSVR:ArrayOfExtentionAttributeTypeExtentionAttribute-ExtentionAttribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute() : __sizeExtentionAttribute(0), ExtentionAttribute(NULL), soap(NULL) { }
	virtual ~CLIPSVR__ArrayOfExtentionAttributeTypeExtentionAttribute() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__StatusDesc
#define SOAP_TYPE_CLIPSVR__StatusDesc (14)
/* CLIPSVR:StatusDesc */
class SOAP_CMAC CLIPSVR__StatusDesc
{
public:
	std::string *code;	/* optional element of type xsd:string */
	std::string *desc;	/* optional element of type xsd:string */
	int retry;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_CLIPSVR__StatusDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__StatusDesc() : code(NULL), desc(NULL), retry(0), soap(NULL) { }
	virtual ~CLIPSVR__StatusDesc() { }
};
#endif

#ifndef SOAP_TYPE_CLIPSVR__ArrayOfProgramBasicEntityType
#define SOAP_TYPE_CLIPSVR__ArrayOfProgramBasicEntityType (15)
/* CLIPSVR:ArrayOfProgramBasicEntityType */
class SOAP_CMAC CLIPSVR__ArrayOfProgramBasicEntityType
{
public:
	std::vector<class ns1__ProgramBasicEntityType * >ProgramBasicEntityType;	/* optional element of type ns1:ProgramBasicEntityType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_CLIPSVR__ArrayOfProgramBasicEntityType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CLIPSVR__ArrayOfProgramBasicEntityType() : soap(NULL) { }
	virtual ~CLIPSVR__ArrayOfProgramBasicEntityType() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__OutStorageFunction
#define SOAP_TYPE__CLIPSVR__OutStorageFunction (16)
/* CLIPSVR:OutStorageFunction */
class SOAP_CMAC _CLIPSVR__OutStorageFunction
{
public:
	CLIPSVR__OutMessage *massageparam;	/* optional element of type CLIPSVR:OutMessage */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__CLIPSVR__OutStorageFunction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__OutStorageFunction() : massageparam(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__OutStorageFunction() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__OutStorageFunctionResponse
#define SOAP_TYPE__CLIPSVR__OutStorageFunctionResponse (17)
/* CLIPSVR:OutStorageFunctionResponse */
class SOAP_CMAC _CLIPSVR__OutStorageFunctionResponse
{
public:
	CLIPSVR__StatusDesc *OutStorageFunctionResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type CLIPSVR:StatusDesc */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__CLIPSVR__OutStorageFunctionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__OutStorageFunctionResponse() : OutStorageFunctionResponse(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__OutStorageFunctionResponse() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__TransferTaskExcuteResultNotify
#define SOAP_TYPE__CLIPSVR__TransferTaskExcuteResultNotify (18)
/* CLIPSVR:TransferTaskExcuteResultNotify */
class SOAP_CMAC _CLIPSVR__TransferTaskExcuteResultNotify
{
public:
	std::string *ResultXML;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__CLIPSVR__TransferTaskExcuteResultNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__TransferTaskExcuteResultNotify() : ResultXML(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__TransferTaskExcuteResultNotify() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__TransferTaskExcuteResultNotifyResponse
#define SOAP_TYPE__CLIPSVR__TransferTaskExcuteResultNotifyResponse (19)
/* CLIPSVR:TransferTaskExcuteResultNotifyResponse */
class SOAP_CMAC _CLIPSVR__TransferTaskExcuteResultNotifyResponse
{
public:
	bool TransferTaskExcuteResultNotifyResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__CLIPSVR__TransferTaskExcuteResultNotifyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__TransferTaskExcuteResultNotifyResponse() : TransferTaskExcuteResultNotifyResult((bool)0), soap(NULL) { }
	virtual ~_CLIPSVR__TransferTaskExcuteResultNotifyResponse() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__MaterialQuery
#define SOAP_TYPE__CLIPSVR__MaterialQuery (20)
/* CLIPSVR:MaterialQuery */
class SOAP_CMAC _CLIPSVR__MaterialQuery
{
public:
	class _ns1__MaterialQueryRequest *ns1__MaterialQueryRequest;	/* required element of type ns1:MaterialQueryRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__CLIPSVR__MaterialQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__MaterialQuery() : ns1__MaterialQueryRequest(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__MaterialQuery() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__MaterialQueryResponse
#define SOAP_TYPE__CLIPSVR__MaterialQueryResponse (21)
/* CLIPSVR:MaterialQueryResponse */
class SOAP_CMAC _CLIPSVR__MaterialQueryResponse
{
public:
	CLIPSVR__ArrayOfProgramBasicEntityType *MaterialQueryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type CLIPSVR:ArrayOfProgramBasicEntityType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__CLIPSVR__MaterialQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__MaterialQueryResponse() : MaterialQueryResult(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__MaterialQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__ClipIsExistQuery
#define SOAP_TYPE__CLIPSVR__ClipIsExistQuery (22)
/* CLIPSVR:ClipIsExistQuery */
class SOAP_CMAC _CLIPSVR__ClipIsExistQuery
{
public:
	class _ns1__ClipExistQueryRequest *ns1__ClipExistQueryRequest;	/* required element of type ns1:ClipExistQueryRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__CLIPSVR__ClipIsExistQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__ClipIsExistQuery() : ns1__ClipExistQueryRequest(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__ClipIsExistQuery() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__ClipIsExistQueryResponse
#define SOAP_TYPE__CLIPSVR__ClipIsExistQueryResponse (23)
/* CLIPSVR:ClipIsExistQueryResponse */
class SOAP_CMAC _CLIPSVR__ClipIsExistQueryResponse
{
public:
	class _ns1__ClipIsExistQueryResult *ns1__ClipIsExistQueryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ClipIsExistQueryResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__CLIPSVR__ClipIsExistQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__ClipIsExistQueryResponse() : ns1__ClipIsExistQueryResult(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__ClipIsExistQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__QueryCache
#define SOAP_TYPE__CLIPSVR__QueryCache (24)
/* CLIPSVR:QueryCache */
class SOAP_CMAC _CLIPSVR__QueryCache
{
public:
	std::string *paramIn;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__CLIPSVR__QueryCache */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__QueryCache() : paramIn(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__QueryCache() { }
};
#endif

#ifndef SOAP_TYPE__CLIPSVR__QueryCacheResponse
#define SOAP_TYPE__CLIPSVR__QueryCacheResponse (25)
/* CLIPSVR:QueryCacheResponse */
class SOAP_CMAC _CLIPSVR__QueryCacheResponse
{
public:
	std::string *QueryCacheResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__CLIPSVR__QueryCacheResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _CLIPSVR__QueryCacheResponse() : QueryCacheResult(NULL), soap(NULL) { }
	virtual ~_CLIPSVR__QueryCacheResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProgramBasicEntityType
#define SOAP_TYPE_ns1__ProgramBasicEntityType (26)
/* ns1:ProgramBasicEntityType */
class SOAP_CMAC ns1__ProgramBasicEntityType
{
public:
	std::string *ProgramCode;	/* optional element of type xsd:string */
	std::string *ProgramName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__ProgramBasicEntityType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProgramBasicEntityType() : ProgramCode(NULL), ProgramName(NULL), soap(NULL) { }
	virtual ~ns1__ProgramBasicEntityType() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MaterialQueryRequest_PlanAirDate
#define SOAP_TYPE__ns1__MaterialQueryRequest_PlanAirDate (54)
/* ns1:MaterialQueryRequest-PlanAirDate */
class SOAP_CMAC _ns1__MaterialQueryRequest_PlanAirDate
{
public:
	std::string *From;	/* optional element of type xsd:string */
	std::string *To;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns1__MaterialQueryRequest_PlanAirDate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MaterialQueryRequest_PlanAirDate() : From(NULL), To(NULL) { }
	virtual ~_ns1__MaterialQueryRequest_PlanAirDate() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MaterialQueryRequest
#define SOAP_TYPE__ns1__MaterialQueryRequest (27)
/* ns1:MaterialQueryRequest */
class SOAP_CMAC _ns1__MaterialQueryRequest
{
public:
	_ns1__MaterialQueryRequest_PlanAirDate *PlanAirDate;	/* required element of type ns1:MaterialQueryRequest-PlanAirDate */
	std::string *ChannelID;	/* required element of type xsd:string */
	std::string *ProgramNameKeyWord;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__MaterialQueryRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MaterialQueryRequest() : PlanAirDate(NULL), ChannelID(NULL), ProgramNameKeyWord(NULL), soap(NULL) { }
	virtual ~_ns1__MaterialQueryRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ClipExistQueryRequest_ClipArray
#define SOAP_TYPE__ns1__ClipExistQueryRequest_ClipArray (56)
/* ns1:ClipExistQueryRequest-ClipArray */
class SOAP_CMAC _ns1__ClipExistQueryRequest_ClipArray
{
public:
	std::string *ClipPrimaryID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__ns1__ClipExistQueryRequest_ClipArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ClipExistQueryRequest_ClipArray() : ClipPrimaryID(NULL) { }
	virtual ~_ns1__ClipExistQueryRequest_ClipArray() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ClipExistQueryRequest
#define SOAP_TYPE__ns1__ClipExistQueryRequest (28)
/* ns1:ClipExistQueryRequest */
class SOAP_CMAC _ns1__ClipExistQueryRequest
{
public:
	int __sizeClipArray;	/* sequence of elements <ClipArray> */
	_ns1__ClipExistQueryRequest_ClipArray *ClipArray;	/* optional element of type ns1:ClipExistQueryRequest-ClipArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1__ClipExistQueryRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ClipExistQueryRequest() : __sizeClipArray(0), ClipArray(NULL), soap(NULL) { }
	virtual ~_ns1__ClipExistQueryRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem
#define SOAP_TYPE__ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem (59)
/* ns1:ClipIsExistQueryResult-ClipArrayResult-ClipItem */
class SOAP_CMAC _ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem
{
public:
	std::string *ClipPrimaryID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem() : ClipPrimaryID(NULL) { }
	virtual ~_ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ClipIsExistQueryResult_ClipArrayResult
#define SOAP_TYPE__ns1__ClipIsExistQueryResult_ClipArrayResult (58)
/* ns1:ClipIsExistQueryResult-ClipArrayResult */
class SOAP_CMAC _ns1__ClipIsExistQueryResult_ClipArrayResult
{
public:
	_ns1__ClipIsExistQueryResult_ClipArrayResult_ClipItem *ClipItem;	/* required element of type ns1:ClipIsExistQueryResult-ClipArrayResult-ClipItem */
	bool IsExist;	/* required element of type xsd:boolean */
	int Statue;	/* required element of type xsd:int */
	std::string *Description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__ns1__ClipIsExistQueryResult_ClipArrayResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ClipIsExistQueryResult_ClipArrayResult() : ClipItem(NULL), IsExist((bool)0), Statue(0), Description(NULL) { }
	virtual ~_ns1__ClipIsExistQueryResult_ClipArrayResult() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ClipIsExistQueryResult
#define SOAP_TYPE__ns1__ClipIsExistQueryResult (29)
/* ns1:ClipIsExistQueryResult */
class SOAP_CMAC _ns1__ClipIsExistQueryResult
{
public:
	int __sizeClipArrayResult;	/* sequence of elements <ClipArrayResult> */
	_ns1__ClipIsExistQueryResult_ClipArrayResult *ClipArrayResult;	/* optional element of type ns1:ClipIsExistQueryResult-ClipArrayResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1__ClipIsExistQueryResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ClipIsExistQueryResult() : __sizeClipArrayResult(0), ClipArrayResult(NULL), soap(NULL) { }
	virtual ~_ns1__ClipIsExistQueryResult() { }
};
#endif

#ifndef SOAP_TYPE___CLIPSVR2__OutStorageFunction
#define SOAP_TYPE___CLIPSVR2__OutStorageFunction (65)
/* Operation wrapper: */
struct __CLIPSVR2__OutStorageFunction
{
public:
	_CLIPSVR__OutStorageFunction *CLIPSVR__OutStorageFunction;	/* optional element of type CLIPSVR:OutStorageFunction */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR2__TransferTaskExcuteResultNotify
#define SOAP_TYPE___CLIPSVR2__TransferTaskExcuteResultNotify (69)
/* Operation wrapper: */
struct __CLIPSVR2__TransferTaskExcuteResultNotify
{
public:
	_CLIPSVR__TransferTaskExcuteResultNotify *CLIPSVR__TransferTaskExcuteResultNotify;	/* optional element of type CLIPSVR:TransferTaskExcuteResultNotify */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR2__MaterialQuery
#define SOAP_TYPE___CLIPSVR2__MaterialQuery (73)
/* Operation wrapper: */
struct __CLIPSVR2__MaterialQuery
{
public:
	_CLIPSVR__MaterialQuery *CLIPSVR__MaterialQuery;	/* optional element of type CLIPSVR:MaterialQuery */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR2__ClipIsExistQuery
#define SOAP_TYPE___CLIPSVR2__ClipIsExistQuery (77)
/* Operation wrapper: */
struct __CLIPSVR2__ClipIsExistQuery
{
public:
	_CLIPSVR__ClipIsExistQuery *CLIPSVR__ClipIsExistQuery;	/* optional element of type CLIPSVR:ClipIsExistQuery */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR2__QueryCache
#define SOAP_TYPE___CLIPSVR2__QueryCache (81)
/* Operation wrapper: */
struct __CLIPSVR2__QueryCache
{
public:
	_CLIPSVR__QueryCache *CLIPSVR__QueryCache;	/* optional element of type CLIPSVR:QueryCache */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR3__OutStorageFunction
#define SOAP_TYPE___CLIPSVR3__OutStorageFunction (83)
/* Operation wrapper: */
struct __CLIPSVR3__OutStorageFunction
{
public:
	_CLIPSVR__OutStorageFunction *CLIPSVR__OutStorageFunction;	/* optional element of type CLIPSVR:OutStorageFunction */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR3__TransferTaskExcuteResultNotify
#define SOAP_TYPE___CLIPSVR3__TransferTaskExcuteResultNotify (85)
/* Operation wrapper: */
struct __CLIPSVR3__TransferTaskExcuteResultNotify
{
public:
	_CLIPSVR__TransferTaskExcuteResultNotify *CLIPSVR__TransferTaskExcuteResultNotify;	/* optional element of type CLIPSVR:TransferTaskExcuteResultNotify */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR3__MaterialQuery
#define SOAP_TYPE___CLIPSVR3__MaterialQuery (87)
/* Operation wrapper: */
struct __CLIPSVR3__MaterialQuery
{
public:
	_CLIPSVR__MaterialQuery *CLIPSVR__MaterialQuery;	/* optional element of type CLIPSVR:MaterialQuery */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR3__ClipIsExistQuery
#define SOAP_TYPE___CLIPSVR3__ClipIsExistQuery (89)
/* Operation wrapper: */
struct __CLIPSVR3__ClipIsExistQuery
{
public:
	_CLIPSVR__ClipIsExistQuery *CLIPSVR__ClipIsExistQuery;	/* optional element of type CLIPSVR:ClipIsExistQuery */
};
#endif

#ifndef SOAP_TYPE___CLIPSVR3__QueryCache
#define SOAP_TYPE___CLIPSVR3__QueryCache (91)
/* Operation wrapper: */
struct __CLIPSVR3__QueryCache
{
public:
	_CLIPSVR__QueryCache *CLIPSVR__QueryCache;	/* optional element of type CLIPSVR:QueryCache */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (92)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (93)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (95)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (98)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (99)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
