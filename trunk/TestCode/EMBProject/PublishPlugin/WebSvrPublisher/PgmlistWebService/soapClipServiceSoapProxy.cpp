/* soapClipServiceSoapProxy.cpp
   Generated by gSOAP 2.7.13 from clipservice.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapClipServiceSoapProxy.h"

ClipServiceSoapProxy::ClipServiceSoapProxy()
{	ClipServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ClipServiceSoapProxy::ClipServiceSoapProxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	ClipServiceSoapProxy_init(soap.imode, soap.omode);
}

ClipServiceSoapProxy::ClipServiceSoapProxy(soap_mode iomode)
{	ClipServiceSoapProxy_init(iomode, iomode);
}

ClipServiceSoapProxy::ClipServiceSoapProxy(soap_mode imode, soap_mode omode)
{	ClipServiceSoapProxy_init(imode, omode);
}

void ClipServiceSoapProxy::ClipServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://JSTV/PublicService/Parameter/", NULL, NULL},
	{"CLIPSVR2", "http://219.232.52.76:8084/WebSrv/FounderService.asmx/ClipServiceSoap", NULL, NULL},
	{"CLIPSVR", "http://219.232.52.76:8084/WebSrv/FounderService.asmx", NULL, NULL},
	{"CLIPSVR3", "http://219.232.52.76:8084/WebSrv/FounderService.asmx/ClipServiceSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

ClipServiceSoapProxy::~ClipServiceSoapProxy()
{ }

void ClipServiceSoapProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *ClipServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *ClipServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ClipServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ClipServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

void ClipServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void ClipServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *ClipServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ClipServiceSoapProxy::OutStorageFunction(_CLIPSVR__OutStorageFunction *CLIPSVR__OutStorageFunction, _CLIPSVR__OutStorageFunctionResponse *CLIPSVR__OutStorageFunctionResponse)
{	struct soap *soap = this;
	struct __CLIPSVR2__OutStorageFunction soap_tmp___CLIPSVR2__OutStorageFunction;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:6477/clipservice.asmx";
	soap_action = "http://219.232.52.76:8084/WebSrv/FounderService.asmx/OutStorageFunction";
	soap->encodingStyle = NULL;
	soap_tmp___CLIPSVR2__OutStorageFunction.CLIPSVR__OutStorageFunction = CLIPSVR__OutStorageFunction;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___CLIPSVR2__OutStorageFunction(soap, &soap_tmp___CLIPSVR2__OutStorageFunction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___CLIPSVR2__OutStorageFunction(soap, &soap_tmp___CLIPSVR2__OutStorageFunction, "-CLIPSVR2:OutStorageFunction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___CLIPSVR2__OutStorageFunction(soap, &soap_tmp___CLIPSVR2__OutStorageFunction, "-CLIPSVR2:OutStorageFunction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!CLIPSVR__OutStorageFunctionResponse)
		return soap_closesock(soap);
	CLIPSVR__OutStorageFunctionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	CLIPSVR__OutStorageFunctionResponse->soap_get(soap, "CLIPSVR:OutStorageFunctionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ClipServiceSoapProxy::TransferTaskExcuteResultNotify(_CLIPSVR__TransferTaskExcuteResultNotify *CLIPSVR__TransferTaskExcuteResultNotify, _CLIPSVR__TransferTaskExcuteResultNotifyResponse *CLIPSVR__TransferTaskExcuteResultNotifyResponse)
{	struct soap *soap = this;
	struct __CLIPSVR2__TransferTaskExcuteResultNotify soap_tmp___CLIPSVR2__TransferTaskExcuteResultNotify;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:6477/clipservice.asmx";
	soap_action = "http://219.232.52.76:8084/WebSrv/FounderService.asmx/TransferTaskExcuteResultNotify";
	soap->encodingStyle = NULL;
	soap_tmp___CLIPSVR2__TransferTaskExcuteResultNotify.CLIPSVR__TransferTaskExcuteResultNotify = CLIPSVR__TransferTaskExcuteResultNotify;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___CLIPSVR2__TransferTaskExcuteResultNotify(soap, &soap_tmp___CLIPSVR2__TransferTaskExcuteResultNotify);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___CLIPSVR2__TransferTaskExcuteResultNotify(soap, &soap_tmp___CLIPSVR2__TransferTaskExcuteResultNotify, "-CLIPSVR2:TransferTaskExcuteResultNotify", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___CLIPSVR2__TransferTaskExcuteResultNotify(soap, &soap_tmp___CLIPSVR2__TransferTaskExcuteResultNotify, "-CLIPSVR2:TransferTaskExcuteResultNotify", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!CLIPSVR__TransferTaskExcuteResultNotifyResponse)
		return soap_closesock(soap);
	CLIPSVR__TransferTaskExcuteResultNotifyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	CLIPSVR__TransferTaskExcuteResultNotifyResponse->soap_get(soap, "CLIPSVR:TransferTaskExcuteResultNotifyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ClipServiceSoapProxy::MaterialQuery(_CLIPSVR__MaterialQuery *CLIPSVR__MaterialQuery, _CLIPSVR__MaterialQueryResponse *CLIPSVR__MaterialQueryResponse)
{	struct soap *soap = this;
	struct __CLIPSVR2__MaterialQuery soap_tmp___CLIPSVR2__MaterialQuery;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:6477/clipservice.asmx";
	soap_action = "http://219.232.52.76:8084/WebSrv/FounderService.asmx/MaterialQuery";
	soap->encodingStyle = NULL;
	soap_tmp___CLIPSVR2__MaterialQuery.CLIPSVR__MaterialQuery = CLIPSVR__MaterialQuery;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___CLIPSVR2__MaterialQuery(soap, &soap_tmp___CLIPSVR2__MaterialQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___CLIPSVR2__MaterialQuery(soap, &soap_tmp___CLIPSVR2__MaterialQuery, "-CLIPSVR2:MaterialQuery", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___CLIPSVR2__MaterialQuery(soap, &soap_tmp___CLIPSVR2__MaterialQuery, "-CLIPSVR2:MaterialQuery", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!CLIPSVR__MaterialQueryResponse)
		return soap_closesock(soap);
	CLIPSVR__MaterialQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	CLIPSVR__MaterialQueryResponse->soap_get(soap, "CLIPSVR:MaterialQueryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ClipServiceSoapProxy::ClipIsExistQuery(_CLIPSVR__ClipIsExistQuery *CLIPSVR__ClipIsExistQuery, _CLIPSVR__ClipIsExistQueryResponse *CLIPSVR__ClipIsExistQueryResponse)
{	struct soap *soap = this;
	struct __CLIPSVR2__ClipIsExistQuery soap_tmp___CLIPSVR2__ClipIsExistQuery;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:6477/clipservice.asmx";
	soap_action = "http://219.232.52.76:8084/WebSrv/FounderService.asmx/ClipIsExistQuery";
	soap->encodingStyle = NULL;
	soap_tmp___CLIPSVR2__ClipIsExistQuery.CLIPSVR__ClipIsExistQuery = CLIPSVR__ClipIsExistQuery;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___CLIPSVR2__ClipIsExistQuery(soap, &soap_tmp___CLIPSVR2__ClipIsExistQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___CLIPSVR2__ClipIsExistQuery(soap, &soap_tmp___CLIPSVR2__ClipIsExistQuery, "-CLIPSVR2:ClipIsExistQuery", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___CLIPSVR2__ClipIsExistQuery(soap, &soap_tmp___CLIPSVR2__ClipIsExistQuery, "-CLIPSVR2:ClipIsExistQuery", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!CLIPSVR__ClipIsExistQueryResponse)
		return soap_closesock(soap);
	CLIPSVR__ClipIsExistQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	CLIPSVR__ClipIsExistQueryResponse->soap_get(soap, "CLIPSVR:ClipIsExistQueryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ClipServiceSoapProxy::QueryCache(_CLIPSVR__QueryCache *CLIPSVR__QueryCache, _CLIPSVR__QueryCacheResponse *CLIPSVR__QueryCacheResponse)
{	struct soap *soap = this;
	struct __CLIPSVR2__QueryCache soap_tmp___CLIPSVR2__QueryCache;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:6477/clipservice.asmx";
	soap_action = "http://219.232.52.76:8084/WebSrv/FounderService.asmx/QueryCache";
	soap->encodingStyle = NULL;
	soap_tmp___CLIPSVR2__QueryCache.CLIPSVR__QueryCache = CLIPSVR__QueryCache;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___CLIPSVR2__QueryCache(soap, &soap_tmp___CLIPSVR2__QueryCache);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___CLIPSVR2__QueryCache(soap, &soap_tmp___CLIPSVR2__QueryCache, "-CLIPSVR2:QueryCache", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___CLIPSVR2__QueryCache(soap, &soap_tmp___CLIPSVR2__QueryCache, "-CLIPSVR2:QueryCache", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!CLIPSVR__QueryCacheResponse)
		return soap_closesock(soap);
	CLIPSVR__QueryCacheResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	CLIPSVR__QueryCacheResponse->soap_get(soap, "CLIPSVR:QueryCacheResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
